{"ast":null,"code":"var _jsxFileName = \"/Users/sahilsutaria/Desktop/React/TrackerCovid/src/Charts.js\";\nimport React from \"react\";\nimport Chart from 'chart.js';\nimport { Card } from 'react-bootstrap';\nexport default function graphs(props) {\n  let Date_total = new Map();\n  let Date_deaths = new Map();\n  let Date_newdeaths = new Map();\n  let date_key = [];\n  let date_val = [];\n  let death_date = [];\n  let death_val = [];\n  let new_death_date = [];\n  let new_death_val = [];\n  let col = ['orange', 'red', 'black', 'gray', 'yellow', 'blue', 'green', '#c45850', '#344e4f'];\n  fetch(`https://coronavirus-monitor.p.rapidapi.com/coronavirus/cases_by_particular_country.php?country=${props.country}`, {\n    \"method\": \"GET\",\n    \"headers\": {\n      \"x-rapidapi-host\": \"coronavirus-monitor.p.rapidapi.com\",\n      \"x-rapidapi-key\": \"ebf8d75e2dmsh37e9046fd3028eep14281ajsn7d548a9e63d1\"\n    }\n  }).then(response => {\n    return response.json();\n  }).then(resp => {\n    let metadata = resp.stat_by_country;\n\n    for (let i = 0; i < metadata.length; i++) {\n      let d = metadata[i].record_date;\n      let total_cases = metadata[i].total_cases;\n      let total_death = metadata[i].total_deaths;\n      let new_deaths = metadata[i].new_deaths;\n      let date = d.split(\" \");\n\n      if (total_cases !== \"\") {\n        let tot = total_cases.replace(/,/g, '');\n        Date_total.set(date[0], Number(tot));\n      }\n\n      if (total_death !== \"\") {\n        let dth = total_death.replace(/,/g, '');\n        Date_deaths.set(date[0], Number(dth));\n      }\n\n      if (new_deaths !== \"\") {\n        let nd = new_deaths.replace(/,/g, '');\n\n        if (Number(nd) > 30) {\n          Date_newdeaths.set(date[0], Number(nd));\n        }\n      }\n    }\n\n    date_key = Array.from(Date_total.keys()).slice(Math.max(Date_total.length - 30, 1));\n    date_val = Array.from(Date_total.values()).slice(Math.max(Date_total.length - 30, 1));\n    death_date = Array.from(Date_deaths.keys()).slice(Math.max(Date_deaths.length - 30, 1));\n    death_val = Array.from(Date_deaths.values()).slice(Math.max(Date_deaths.length - 30, 1));\n    new_death_date = Array.from(Date_newdeaths.keys()).slice(Math.max(Date_newdeaths.length - 30, 1));\n    new_death_val = Array.from(Date_newdeaths.values()).slice(Math.max(Date_newdeaths.length - 30, 1));\n    /* Native*/\n\n    if (window.innerWidth < 1100) {\n      let native_date = [];\n      let native_val = [];\n      let native_date_death = [];\n      let native_val_death = [];\n      let native_daily_date = [];\n      let native_daily_case = [];\n\n      for (let i = 0; i < date_key.length - 2; i = i + 2) {\n        if (date_key[i] !== undefined) {\n          native_date.push(date_key[i]);\n          native_val.push(date_val[i]);\n        }\n\n        if (death_date[i] !== undefined) {\n          native_date_death.push(death_date[i]);\n          native_val_death.push(death_val[i]);\n        }\n\n        if (new_death_date[i] !== undefined) {\n          native_daily_date.push(new_death_date[i]);\n          native_daily_case.push(new_death_val[i]);\n        }\n      }\n\n      Chart.defaults.global.animation.duration = 4000;\n      Chart.defaults.global.legend = false;\n      const myc = document.getElementById(\"chart1\").getContext('2d');\n      const myChart = new Chart(myc, {\n        type: 'line',\n        options: {\n          responsive: true,\n          maintainAspectRatio: true,\n          events: ['mousemove'],\n          label: {\n            legend: true\n          }\n        },\n        data: {\n          labels: native_date.reverse(),\n          datasets: [{\n            borderColor: col[Math.floor(Math.random() * col.length)],\n            data: native_val.reverse()\n          }]\n        }\n      });\n      myChart.clear();\n      const myc2 = document.getElementById(\"chart2\").getContext('2d');\n      const myChart2 = new Chart(myc2, {\n        type: 'bar',\n        options: {\n          responsive: true,\n          maintainAspectRatio: true,\n          events: ['mousemove']\n        },\n        data: {\n          labels: native_date_death.reverse(),\n          datasets: [{\n            backgroundColor: \"gray\",\n            data: native_val_death.reverse()\n          }]\n        }\n      });\n      myChart2.clear();\n      const myc3 = document.getElementById(\"chart3\").getContext('2d');\n      const myChart3 = new Chart(myc3, {\n        type: 'line',\n        options: {\n          responsive: true,\n          maintainAspectRatio: true,\n          events: ['mousemove']\n        },\n        data: {\n          labels: native_daily_date.reverse(),\n          datasets: [{\n            borderColor: \"gray\",\n            backgroundColor: \"yellow\",\n            data: native_daily_case.reverse()\n          }]\n        }\n      });\n      myChart3.clear();\n    }\n    /*  full screen*/\n    else {\n        Chart.defaults.global.defaultFontSize = 11;\n        Chart.defaults.global.animation.duration = 4000;\n        Chart.defaults.global.legend = false;\n        const myc = document.getElementById(\"chart1\").getContext('2d');\n        const myChart = new Chart(myc, {\n          type: 'line',\n          options: {\n            responsive: true,\n            maintainAspectRatio: true,\n            events: ['mousemove']\n          },\n          data: {\n            labels: date_key.reverse(),\n            datasets: [{\n              label: `Case vs Dates in ${props.country.toUpperCase()}`,\n              borderColor: col[Math.floor(Math.random() * col.length)],\n              data: date_val.reverse()\n            }]\n          }\n        });\n        myChart.clear();\n        const my2 = document.getElementById(\"chart2\").getContext('2d');\n        const myChart2 = new Chart(my2, {\n          type: 'bar',\n          options: {\n            responsive: true,\n            maintainAspectRatio: true,\n            events: ['mousemove']\n          },\n          data: {\n            labels: death_date.reverse(),\n            datasets: [{\n              label: `Deaths vs Dates in ${props.country.toUpperCase()}`,\n              data: death_val.reverse(),\n              backgroundColor: \"gray\"\n            }]\n          }\n        });\n        myChart2.clear();\n        const my3 = document.getElementById(\"chart3\").getContext('2d');\n        const myChart3 = new Chart(my3, {\n          type: 'line',\n          options: {\n            responsive: true,\n            maintainAspectRatio: true,\n            events: ['mousemove']\n          },\n          data: {\n            labels: new_death_date.reverse(),\n            datasets: [{\n              label: `Daily Deaths vs Dates in ${props.country.toUpperCase()}`,\n              borderColor: \"gray\",\n              backgroundColor: \"yellow\",\n              data: new_death_val.reverse()\n            }]\n          }\n        });\n        myChart3.clear();\n      }\n  }).catch(err => {\n    console.log(err);\n  });\n  let sty = {\n    width: \"52vw\",\n    height: \"63vh\"\n  };\n\n  if (window.innerWidth < 1100) {\n    sty.width = \"82vw\";\n    sty.height = \"87vw\";\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Card, {\n    className: \"effect7\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Card.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Card.Header, {\n    className: \"effect7 head\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 21\n    }\n  }, \"Cases vs Dates in \", props.country.toUpperCase()), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"chr\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"canvas\", {\n    style: sty,\n    id: \"chart1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 25\n    }\n  }, \" \"))), /*#__PURE__*/React.createElement(Card.Footer, {\n    className: \"effect7 \",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Card, {\n    className: \"effect7\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Card.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Card.Header, {\n    className: \"effect7 head\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 21\n    }\n  }, \"Daily Deaths vs Dates \", props.country.toUpperCase()), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"chr\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"canvas\", {\n    style: sty,\n    id: \"chart3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 25\n    }\n  }))), /*#__PURE__*/React.createElement(Card.Footer, {\n    className: \"effect7\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Card, {\n    className: \"effect7\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Card.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Card.Header, {\n    className: \"effect7 head\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 21\n    }\n  }, \"Total Deaths vs Dates \", props.country.toUpperCase()), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"chr\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"canvas\", {\n    style: sty,\n    id: \"chart2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 25\n    }\n  }))), /*#__PURE__*/React.createElement(Card.Footer, {\n    className: \"effect7\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 17\n    }\n  })));\n}","map":{"version":3,"sources":["/Users/sahilsutaria/Desktop/React/TrackerCovid/src/Charts.js"],"names":["React","Chart","Card","graphs","props","Date_total","Map","Date_deaths","Date_newdeaths","date_key","date_val","death_date","death_val","new_death_date","new_death_val","col","fetch","country","then","response","json","resp","metadata","stat_by_country","i","length","d","record_date","total_cases","total_death","total_deaths","new_deaths","date","split","tot","replace","set","Number","dth","nd","Array","from","keys","slice","Math","max","values","window","innerWidth","native_date","native_val","native_date_death","native_val_death","native_daily_date","native_daily_case","undefined","push","defaults","global","animation","duration","legend","myc","document","getElementById","getContext","myChart","type","options","responsive","maintainAspectRatio","events","label","data","labels","reverse","datasets","borderColor","floor","random","clear","myc2","myChart2","backgroundColor","myc3","myChart3","defaultFontSize","toUpperCase","my2","my3","catch","err","console","log","sty","width","height"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Chart from 'chart.js';\nimport {Card} from 'react-bootstrap';\n\n\n\nexport default function graphs(props){\n\n    let Date_total= new Map()\n    let Date_deaths= new Map()\n    let Date_newdeaths= new Map()\n    let date_key=[]\n    let date_val=[]\n    let death_date=[]\n    let death_val=[]\n    let new_death_date=[]\n    let new_death_val=[]\n\n    let col = ['orange', 'red', 'black', 'gray', 'yellow', 'blue', 'green','#c45850','#344e4f']\n\n\n\n\n    fetch(`https://coronavirus-monitor.p.rapidapi.com/coronavirus/cases_by_particular_country.php?country=${props.country}`, {\n        \"method\": \"GET\",\n        \"headers\": {\n            \"x-rapidapi-host\": \"coronavirus-monitor.p.rapidapi.com\",\n            \"x-rapidapi-key\": \"ebf8d75e2dmsh37e9046fd3028eep14281ajsn7d548a9e63d1\"\n        }\n    })\n        .then(response => {\n            return response.json();\n        }).then(resp=>{\n\n        let metadata = resp.stat_by_country\n        for (let i=0; i<(metadata.length); i++){\n\n            let d=metadata[i].record_date\n            let total_cases = metadata[i].total_cases\n            let total_death = metadata[i].total_deaths\n            let new_deaths = metadata[i].new_deaths\n\n            let date = d.split(\" \")\n            if (total_cases!==\"\"){\n               let tot=total_cases.replace(/,/g,'')\n                Date_total.set(date[0],Number(tot))\n            }\n            if (total_death!==\"\"){\n                let dth = total_death.replace(/,/g,'')\n                Date_deaths.set(date[0],Number(dth))\n            }\n            if (new_deaths!==\"\"){\n                let nd = new_deaths.replace(/,/g,'')\n                if (Number(nd)>30){\n                    Date_newdeaths.set(date[0],Number(nd))\n                }\n            }\n        }\n        date_key = Array.from( Date_total.keys()).slice(Math.max(Date_total.length - 30, 1));\n        date_val = Array.from (Date_total.values()).slice(Math.max(Date_total.length - 30, 1));\n        death_date=Array.from(Date_deaths.keys()).slice(Math.max(Date_deaths.length - 30, 1));\n        death_val =Array.from(Date_deaths.values()).slice(Math.max(Date_deaths.length - 30, 1));\n        new_death_date = Array.from(Date_newdeaths.keys()).slice(Math.max(Date_newdeaths.length - 30, 1));\n        new_death_val = Array.from(Date_newdeaths.values()).slice(Math.max(Date_newdeaths.length - 30, 1));\n\n        /* Native*/\n        if (window.innerWidth<1100){\n            let native_date=[];\n            let native_val=[]\n            let native_date_death=[];\n            let native_val_death=[]\n            let native_daily_date=[];\n            let native_daily_case =[];\n            for (let i=0; i<date_key.length-2; i=i+2){\n\n                if(date_key[i]!==undefined){\n                    native_date.push(date_key[i])\n                    native_val.push(date_val[i])\n                }\n                if (death_date[i]!==undefined) {\n                    native_date_death.push((death_date[i]))\n                    native_val_death.push((death_val[i]))\n                }\n                if (new_death_date[i]!==undefined){\n                    native_daily_date.push(new_death_date[i])\n                    native_daily_case.push(new_death_val[i])\n                }\n\n            }\n\n            Chart.defaults.global.animation.duration=4000;\n            Chart.defaults.global.legend=false;\n            const myc = document.getElementById(\"chart1\").getContext('2d');\n            const myChart = new Chart(myc, {\n                type: 'line',\n                options:{responsive: true, maintainAspectRatio: true, events: ['mousemove'],label:{legend:true}},\n                data: {\n                    labels: native_date.reverse(),\n                    datasets: [{borderColor: col[Math.floor(Math.random() * col.length)], data:native_val.reverse(),}]\n                    },\n                });\n            myChart.clear()\n\n            const myc2 = document.getElementById(\"chart2\").getContext('2d');\n            const myChart2 = new Chart(myc2, {\n                type: 'bar',\n                options:{responsive: true, maintainAspectRatio: true, events: ['mousemove'],},\n                data: {\n                    labels: native_date_death.reverse(),\n                    datasets: [{backgroundColor: \"gray\", data:native_val_death.reverse(),}]\n                },\n            });\n            myChart2.clear()\n            const myc3 = document.getElementById(\"chart3\").getContext('2d');\n            const myChart3 = new Chart(myc3,{\n                type: 'line',\n                options:{responsive: true, maintainAspectRatio: true, events: ['mousemove'],},\n                data: {\n                    labels: native_daily_date.reverse(),\n                    datasets: [{\n                        borderColor: \"gray\",\n                        backgroundColor: \"yellow\",\n                        data:native_daily_case.reverse(),}]\n                },\n            });\n            myChart3.clear()\n\n        }\n        /*  full screen*/\n        else{\n            Chart.defaults.global.defaultFontSize = 11;\n            Chart.defaults.global.animation.duration=4000;\n            Chart.defaults.global.legend=false;\n\n            const myc = document.getElementById(\"chart1\").getContext('2d');\n            const myChart = new Chart(myc, {\n                type: 'line',\n                options:{responsive: true, maintainAspectRatio: true, events: ['mousemove'],},\n\n                data: {\n                    labels: date_key.reverse(),\n                    datasets: [{label: `Case vs Dates in ${props.country.toUpperCase()}`,\n                                borderColor: col[Math.floor(Math.random() * col.length)],\n                                data:date_val.reverse(),\n                    }]\n                },\n            });\n\n            myChart.clear()\n\n            const my2 = document.getElementById(\"chart2\").getContext('2d');\n            const myChart2 = new Chart(my2, {\n                type: 'bar',\n                options:{responsive: true, maintainAspectRatio: true, events: ['mousemove']},\n\n                data: {\n                    labels: death_date.reverse(),\n                    datasets: [{label: `Deaths vs Dates in ${props.country.toUpperCase()}`,\n                                data:death_val.reverse(),\n                                backgroundColor: \"gray\",\n                    }]\n                },\n            });\n            myChart2.clear()\n            const my3 = document.getElementById(\"chart3\").getContext('2d');\n            const myChart3 = new Chart(my3, {\n                type: 'line',\n                options:{responsive: true, maintainAspectRatio: true, events: ['mousemove'],},\n\n                data: {\n                    labels: new_death_date.reverse(),\n\n                    datasets: [{label: `Daily Deaths vs Dates in ${props.country.toUpperCase()}`,\n                                borderColor: \"gray\",\n                                backgroundColor: \"yellow\",\n                                data:new_death_val.reverse(),\n                    }]\n                },\n            });\n            myChart3.clear()\n\n        }\n\n\n    }).catch(err => {console.log(err);});\n\n    let sty={\n        width:\"52vw\",\n        height:\"63vh\"\n    }\n\n    if (window.innerWidth<1100){\n        sty.width =\"82vw\";\n        sty.height=\"87vw\";\n\n    }\n\n\n    return(\n        <div>\n            <br/>\n            <Card className=\"effect7\">\n                <Card.Body>\n                    <Card.Header className=\"effect7 head\">Cases vs Dates in {props.country.toUpperCase()}</Card.Header>\n                    <br/>\n                    <div id=\"chr\">\n                        <canvas style={sty} id=\"chart1\"> </canvas>\n                    </div>\n                </Card.Body>\n                    <Card.Footer className=\"effect7 \"></Card.Footer>\n            </Card>\n            <br/>\n            <br/>\n\n            <Card className=\"effect7\">\n                <Card.Body>\n                    <Card.Header className=\"effect7 head\">Daily Deaths vs Dates {props.country.toUpperCase()}</Card.Header>\n                    <br/>\n                    <div id=\"chr\">\n                        <canvas style={sty} id=\"chart3\"></canvas>\n                    </div>\n                </Card.Body>\n                <Card.Footer className=\"effect7\"></Card.Footer>\n            </Card>\n\n            <br/>\n            <br/>\n            <Card className=\"effect7\">\n                <Card.Body>\n                    <Card.Header className=\"effect7 head\">Total Deaths vs Dates {props.country.toUpperCase()}</Card.Header>\n                    <br/>\n                    <div id=\"chr\">\n                        <canvas style={sty} id=\"chart2\"></canvas>\n                    </div>\n                </Card.Body>\n                <Card.Footer className=\"effect7\"></Card.Footer>\n            </Card>\n\n\n\n\n        </div>\n    )\n\n\n\n}\n"]},"metadata":{},"sourceType":"module"}